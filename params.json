{
  "name": "Xelement",
  "tagline": "A powerful xelement (Xml Element) class to parse xml for JavaScript",
  "body": "# xelement\r\n#### _A powerful xelement (Xml Element) class to parse xml for JavaScript._\r\n***\r\n`xelement` represents an xml element. You can use this class to create or parse xml string to xml element. It allows to add, edit and delete any element or its attributes within the element tree and serialize the entire element to string from. You can search through the element and can traverse the element tree up and downwards.\r\n\r\nThe basic building blocks of this module are XElement class and Parser\r\n* XElement class represents each element in the xml element tree.\r\n* Parser will create XElement tree from the xml string.\r\n\r\n### Installation for node\r\n\tnpm install xelement\r\n### Usage\r\n```js\r\n\tvar xelement = require('xelement');\r\n\tvar xeleRoot = new xelement.Parse(\"<root><ele1>some value</ele1></root>\");\r\n```\r\n### Class\r\nThe main class is XElement which represents the parsed xml, all elements in the XElement tree from root to leaf element are XElement.\r\n#### Members\r\n* `name`: name of the element or node name “\\<root\\>”. For more information about namespaces please refer to [sax][sax].\r\n* `attr`: an object represents all attributes of the element. The default value is `{}`. Ex: - `book.attr.id` where `<book id=”bk108”>`\r\n* `value`: value of the element.  Ex: - `book.value returns` “some value”where `<book>some value</book>`\r\n* `elements`: array of child elements. The default value is `[]`.\r\n* `parent`: refers to the parent element. Ex: - `author.parent.name` will return “book” where `<book><author>tj</author></book>`\r\n\r\n### Parse(data) \r\n```js\r\n\tvar fs = require('fs');\r\n\tvar xelement = require('xelement');\r\n\tvar xmlString = fs.readFileSync('./sampledata.xml', 'utf8');\r\n\txeleCatalog = xelement.Parse(xmlString); //parses the xmlString to XElement object representing complete xml element tree\r\n```\r\n\r\n### Methods\r\n-----\r\n#### descendants(name, ignoreCase) \r\nReturns the array of all descendant element with specified name by default parameter is empty on unspecified and it will return all descendant elements, ignoreCase is the flag whether to ignore the case of the element name, by default set to false. On unsuccessful result it will return [].\r\n```js\r\n\tvar descs = xeleCatalog.descendants('author', true);\t//returns all elements with “author” name\r\n```\r\n#### descendantsAndSelf(name, ignoreCase) \r\nReturns the array of all descendant element with specified name and self by default parameter is empty on unspecified and it will return all descendant elements, ignoreCase is the flag whether to ignore the case of the element name, by default set to false. On unsuccessful result it will return [].\r\n```js\r\n\tvar descs = xeleCatalog.descendantsAndSelf('author', true); //returns all elements with “author” name including self\r\n```\r\n#### descendantFirst(name, ignoreCase) \r\nReturns the first descendant element with specified name, name is not optional , ignoreCase is the flag whether to ignore the case of the element name, by default set to false. On unsuccessful result it will undefined.\r\n```js\r\n\tvar descs = xeleCatalog.descendantsFirst('author', true); //returns the first element with “author” name\r\n```\r\n#### ancestor(name, ignoreCase)\r\nReturns the ancestor parent with specified name. ignoreCase is the flag whether to ignore the case of the element name, by default set to false. On unsuccessful result it will return undefined.\r\n```js\r\n\tvar author = xele.descendantsFirst('author');\r\n\tvar book = author.ancestor('book'); //returns the book element\r\n\tvar catalog= author.ancestor('catalog');   //return the catalog element\r\n```\r\n\r\n#### firstElement() \r\nReturns the first child element, returns undefine if doesn’t exist.\r\n```js\r\n\tvar author = xele.descendantsFirst(book);\r\n\tvar author = author.firstElement(); //returns the author element\r\n```\r\n\r\n#### lastElement() \r\nReturns the last child element, return undefined if doesn’t exist.\r\n```js\r\n\tvar author = xele.descendantsFirst(book);\r\n\tvar description = author.lastElement(); //returns the description element\r\n```\r\n\r\n#### siblings(name) \r\nReturns the siblings of the element with specified name, if name unspecified it returns all siblings. Return [] if doesn’t exist.\r\n```js\r\n\tvar author = xele.descendantsFirst('author');\r\n\tvar sl[] = xele.siblings(); //returns all sibling elements\r\n```\r\n\r\n#### previousSibling() \r\nReturns the previous sibling of the element, it returns undefined if doesn’t exist.\r\n```js\r\n\tvar fd = xeleCatalog.descendantFirst('title', true);\r\n\tvar ps = fd.previousSibling();\r\n\tconsole.log(ps.name); //prints “author”\r\n\tconsole.log(fd.previousSibling().previousSibling()); //prints undefined\r\n```\r\n\r\n#### nextSibling()\r\nReturns the next sibling of the element, it returns undefined if doesn’t exist.\r\n```js\r\n\tvar fd = xeleCatalog.descendantFirst('publish_date', true);\r\n\tvar ps = fd.nextSibling();\r\n\tconsole.log(ps.name); //prints “description”\r\n\tconsole.log(fd.nextSibling().nextSibling()); //prints undefined\r\n```\r\n#### index()\r\nReturns the index of the element among its sibling. Index starts from 0. It returns undefined if the element is not a child other element.\r\n```js\r\n\tvar fd = xeleCatalog.elements.where(function (o) { return o.attr.id == \"bk104\"; });\r\n\tconsole.log(fd[0].index()); //prints 3\r\n```\r\n\r\n#### setAttr(name, value)\r\nSets the value to specified attribute of the element. If the attribute doesn’t exist, it will create.\r\n```js\r\n\tvar fd = xeleCatalog.descendantFirst('book');\r\n\tfd.setAttr('NewAttr', '100');\r\n\tconsole.log(fd.attr.NewAttr); //prints “100”   \r\n```\r\n#### getAttr(name)\r\nReturns the value from specified attribute of the element. If the attribute doesn’t exist it will return empty.\r\n```js\r\n\tvar fd = xeleCatalog.descendantFirst('book');\r\n\tfd.setAttr('NewAttr', '100');\r\n\tconsole.log(fd.getAttr('NewAttr')); //prints “100” \r\n\tconsole.log(fd.getAttr('yyy')); //prints empty\r\n```\r\n#### removeAttr(name)\r\nRemove the specified attribute from the element.\r\n```js\r\n\tvar fd = xeleCatalog.descendantFirst('book');\r\n\tfd.removeAttr('NewAttr', '100');\r\n\tconsole.log(fd.attr.NewAttr); //prints undefined\r\n\tconsole.log(fd.getAttr('NewAttr')); //prints empty\r\n```\r\n\r\n#### add(obj)\r\nAdds xelement as its child element. Single or array of xelement can be passed. Only valid xelement object will be added and others ignored.\r\n```js\r\n\tvar dummy = {};\r\n\txeleCatalog.add(dummy);//adding invalid object it will ignore     \r\n\tconsole.log(xeleCatalog.lastElement().attr.id); //prints “bk112” because the {} object didn’t add to xeleCatalog element.\r\n\t\r\n\t//adding single element\r\n\tvar newBook = new xelement.XElement(\"book\");\r\n\tnewBook.attr.id = \"bk113\";\r\n\txeleCatalog.add(newBook);\r\n\tconsole.log(xeleCatalog.lastElement().attr.id); //prints “bk113”\r\n\t\r\n\t//Adding range of elements\r\n\tvar newElements = [];\r\n\tfor (var i = 0; i < 5; i++) {\r\n\t\tnewBook = new xelement.XElement(\"book\");\r\n\t\tnewBook.attr.id = \"bk\" + (113 + i).toString();\r\n\t\tnewElements.push(newBook);\r\n\t}\r\n\txeleCatalog.add(newElements);    \r\n\tconsole.log(xeleCatalog.lastElement().attr.id) //prints “bk117”    \r\n```\r\n\r\n#### createElement(name,value)\r\nCreate a new element and adds to its child elements. If value parameter is unspecified it will consider as empty.\r\n```js\r\n\tvar newEle = xeleCatalog.createElement(\"TestElement\");\r\n\tnewEle.value = \"100\";  \r\n\tconsole.log(xeleCatalog.lastElement().name); //prints “TestElement”\r\n\t\r\n\t//or\r\n\tvar newEle = xeleCatalog.createElement(\"TestElement\", \"100\");  \r\n\tconsole.log(newEle.value); //prints “100”\r\n```\r\n#### element(name, ignoreCase)\r\nReturn the first element with specified name, name is not optional. It returns undefined if doesn’t exist.\r\n```js\r\n\tvar fd = xeleCatalog.element('book1');\r\n\tconsole.log(fd); //prints undefined\r\n\tfd = xeleCatalog.element('book');\r\n\tconsole.log(fd.name); //prints “book”\r\n```\r\n#### getElements(name, ignoreCase)\r\nReturn the all elements with specified name, if name unspecified it will return all child elements.\r\n```js\r\n\tvar eles = xeleCatalog.getElements('book', true); //return all elements with “book” name\r\n```\t\r\n#### getElementValue(name, ignoreCase)\r\nReturn the first element value with specified name, name is not optional.\r\n```js\r\n\tvar vl = xeleCatalog.getElementValue(\"TestElement1\", true);\r\n\tconsole.log(vl); //prints TestElement1 element value\r\n```\r\n#### setElementValue(name,value)\r\nSets the specified child element value. If element doesn’t exist it will create new.\r\n```js\r\n\txeleCatalog.setElementValue(\"TestElement\", 1001); \r\n\tconsole.log(xeleCatalog.getElementValue(\"TestElement\")); //prints 1001\r\n````\r\n\r\n#### remove()\r\nRemove the current element from its parent. The element will be no longer associated with element tree.\r\n```js\r\n\tvar fd = xeleCatalog.descendantFirst('book');\r\n\tfd.remove(); //remove the book element from its parent\r\n```\r\n#### removeAll()\r\nRemoves the all child elements. All child elements will be no longer associated with element tree.\r\n```js\r\n\tvar fd = xeleCatalog.descendantFirst('book');\r\n\tfd.removeAll(); //remove all child element from book element\r\n```\r\n#### toXmlString()\r\nConverts the xelement into valid xml string. This function is available for each element in the tree thus xml string can be created from any element from the tree.\r\n```js\r\n\tvar fd = xeleCatalog.descendantFirst('book');\r\n\tconsole.log(fd.toXmlString())\r\n\t//prints the following xml\r\n```\r\n```xml\r\n\t<book id=\"bk101\">\r\n\t\t<author>Gambardella, Matthew</author>\r\n\t\t<title>XML Developer's Guide</title>\r\n\t\t<genre>Computer</genre>\r\n\t\t<price>44.95</price>\r\n\t\t<publish_date>2000-10-01</publish_date>\r\n\t\t<description>\r\n\t\t\tAn in-depth look at creating applications with XML.\r\n\t\t</description>\r\n\t</book>\r\n```\r\n\r\n### Array Extensions\r\n##### Array extension methods will facilitate search, select, foreach operations on collection of items\r\n------\r\n\r\n#### where(fn)\r\nIs an extension method to an array to enable to apply filter to its collection as array. The default value is [].\r\n```js\r\n\tvar wr = xeleCatalog.descendants(\"book\").where(function (o) { return o.attr.id == \"bk109\" });\r\n```\r\n#### select(fn)\r\nIs an extension method to an array to select any object or object value as array. The default value is [].\r\n```js\r\n\tvar wr = xeleCatalog.descendants(\"author\").select(function (o) { return o.value; });\r\n```\r\n#### selectMany(fn)\r\nIs an extension method to an array to select Many and returns a single array. The default value is [].\r\n```js\r\n\tvar wr = xeleCatalog.descendants(\"book\").selectMany(function (o) { return o.elements });\r\n```\r\n#### forEach(fn)\r\nIs an extension method to an array to execute operation on each item in the array.\r\n```js\r\n\tvar wr = xeleCatalog.descendants(\"book\");\r\n\twr.forEach(function (o) {\r\n\t\to.setAttr('newAttr', 'someValue');\r\n\t\to.createElement('newElement', 'someValue');\r\n   \t});\r\n```\r\n\r\n### Feedback and Comments\r\n----\r\nPlease feel free to post your comments on [Twitter][twitter] and issues on [github][githubIssues]\r\n\r\n\r\n[twitter]: https://twitter.com/dongariteja\r\n[sax]: https://github.com/isaacs/sax-js\r\n[githubIssues]: https://github.com/dongariteja/xelement/issues",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}